//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.0.21.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------





export class ContactSearch implements IContactSearch {
    searchTerm!: string | undefined;
    pageNumber!: number;

    constructor(data?: IContactSearch) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.searchTerm = data["SearchTerm"];
            this.pageNumber = data["PageNumber"];
        }
    }

    static fromJS(data: any, _mappings?: any): ContactSearch {
        data = typeof data === 'object' ? data : {};
        return createInstance<ContactSearch>(data, _mappings, ContactSearch);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["SearchTerm"] = this.searchTerm;
        data["PageNumber"] = this.pageNumber;
        return data; 
    }
}

export interface IContactSearch {
    searchTerm: string | undefined;
    pageNumber: number;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}