//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v10.0.21.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------





export class Contact implements IContact {
    title!: string | undefined;
    forename!: string | undefined;
    surname!: string | undefined;

    constructor(data?: IContact) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            this.title = data["Title"];
            this.forename = data["Forename"];
            this.surname = data["Surname"];
        }
    }

    static fromJS(data: any, _mappings?: any): Contact {
        data = typeof data === 'object' ? data : {};
        return createInstance<Contact>(data, _mappings, Contact);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["Title"] = this.title;
        data["Forename"] = this.forename;
        data["Surname"] = this.surname;
        return data; 
    }
}

export interface IContact {
    title: string | undefined;
    forename: string | undefined;
    surname: string | undefined;
}

export class GetContactsResponse implements IGetContactsResponse {
    results!: Contact[];
    totalResultCount!: number;
    resultsPerPage!: number;

    constructor(data?: IGetContactsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.results = [];
        }
    }

    init(data?: any, _mappings?: any) {
        if (data) {
            if (Array.isArray(data["Results"])) {
                this.results = [] as any;
                for (let item of data["Results"])
                    this.results!.push(Contact.fromJS(item, _mappings));
            }
            this.totalResultCount = data["TotalResultCount"];
            this.resultsPerPage = data["ResultsPerPage"];
        }
    }

    static fromJS(data: any, _mappings?: any): GetContactsResponse {
        data = typeof data === 'object' ? data : {};
        return createInstance<GetContactsResponse>(data, _mappings, GetContactsResponse);
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.results)) {
            data["Results"] = [];
            for (let item of this.results)
                data["Results"].push(item.toJSON());
        }
        data["TotalResultCount"] = this.totalResultCount;
        data["ResultsPerPage"] = this.resultsPerPage;
        return data; 
    }
}

export interface IGetContactsResponse {
    results: Contact[];
    totalResultCount: number;
    resultsPerPage: number;
}

function jsonParse(json: any, reviver?: any) {
    json = JSON.parse(json, reviver);

    var byid: any = {};
    var refs: any = [];
    json = (function recurse(obj: any, prop?: any, parent?: any) {
        if (typeof obj !== 'object' || !obj)
            return obj;
        
        if ("$ref" in obj) {
            let ref = obj.$ref;
            if (ref in byid)
                return byid[ref];
            refs.push([parent, prop, ref]);
            return undefined;
        } else if ("$id" in obj) {
            let id = obj.$id;
            delete obj.$id;
            if ("$values" in obj)
                obj = obj.$values;
            byid[id] = obj;
        }
        
        if (Array.isArray(obj)) {
            obj = obj.map((v, i) => recurse(v, i, obj));
        } else {
            for (var p in obj) {
                if (obj.hasOwnProperty(p) && obj[p] && typeof obj[p] === 'object')
                    obj[p] = recurse(obj[p], p, obj);
            }
        }

        return obj;
    })(json);

    for (let i = 0; i < refs.length; i++) {
        const ref = refs[i];
        ref[0][ref[1]] = byid[ref[2]];
    }

    return json;
}

function createInstance<T>(data: any, mappings: any, type: any): T {
    if (!mappings)
        mappings = [];
    else {
        let mapping = mappings.filter((m: any) => m.source === data);
        if (mapping.length === 1)
            return <T>mapping[0].target;
    }

    let result: any = new type();
    mappings.push({ source: data, target: result });
    result.init(data, mappings);
    return result;
}